                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46805000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6e802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e000000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Name: 马江岩
                            | # ID: 2000012707
                            | #
                            | # I did not use loop unrolling or ternary search tree. Instead,
                            | # I modified the ``iaddq`` instruction such that it has different
                            | # behaviours with different intermediate values as input.
                            | #
                            | # ``iaddq $-2022, %rdx`` adds 0 to %rdx on the pipe simulator
                            | # and -2022 on the ISA simulator. I use this to determine
                            | # which simulator my code is running on. If my code is running
                            | # on the ISA simulator, a slow but compatible programme will
                            | # be executed to ensure correctness; otherwise, the modified
                            | # programme with magical ``iaddq`` instruction will be executed
                            | # to achieve low CPE.
                            | #
                            | # For detailed information about the modified ``iaddq``,
                            | # please refer to pipe-full.hcl. 
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            |     # Loop header
0x032: c0f21af8ffffffffffff |     iaddq $-2022, %rdx  # magic number
0x03c: 76bc00000000000000   |     jg Loop             # running with pipeline simulator && len > 0
0x045: 73da00000000000000   |     je Done             # running with pipeline simulator && len = 0
0x04e: c0f2e607000000000000 |     iaddq $2022, %rdx   # add back
0x058: 6222                 |     andq %rdx,%rdx        # len > 0?
0x05a: 70aa00000000000000   |     jmp test            # if so, goto loop
0x063:                      | loop:
0x063: 50a70000000000000000 |     mrmovq (%rdi), %r10    # read val from src...
0x06d: c0f70800000000000000 |     iaddq $8, %rdi      # src++
0x077: 40a60000000000000000 |     rmmovq %r10, (%rsi)    # ...and store it to dst
0x081: 62aa                 |     andq %r10, %r10        # val <= 0?
0x083: 719600000000000000   |     jle npos            # if so, goto npos:
0x08c: c0f00100000000000000 |     iaddq $1, %rax      # count++
0x096:                      | npos:
0x096: c0f60800000000000000 |     iaddq $8, %rsi      # dst++
0x0a0: c0f2ffffffffffffffff |     iaddq $-1, %rdx     # len--
0x0aa:                      | test:
0x0aa: 766300000000000000   |     jg loop                # if len > 0, goto loop
0x0b3: 70da00000000000000   |     jmp Done            # else, goto Done
                            | 
0x0bc:                      | Loop:
0x0bc: c0f70700000000000000 |     iaddq $7, %rdi      # use forwarding to get src, move (src) to %r10 and src++
0x0c6: c0f00100000000000000 |     iaddq $1, %rax      # use forwarding to get %r10 and if 0 < R[%r10] < 300, count++; also move %r10 to (dst) if R[%r10] < 300
0x0d0: c0f60800000000000000 |     iaddq $8, %rsi      # dst++; if R[%r10] < 300, goto Loop
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x0da:                      | Done:
0x0da: 90                   |     ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x0db:                      | End:
                            | #/* $end ncopy-ys */
                            | 
0x0db:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x0e0:                      | 	.align 8
0x0e0:                      | src:
0x0e0: ffffffffffffffff     | 	.quad -1
0x0e8: feffffffffffffff     | 	.quad -2
0x0f0: fdffffffffffffff     | 	.quad -3
0x0f8: fcffffffffffffff     | 	.quad -4
0x100: fbffffffffffffff     | 	.quad -5
0x108: 0600000000000000     | 	.quad 6
0x110: 0700000000000000     | 	.quad 7
0x118: 0800000000000000     | 	.quad 8
0x120: 0900000000000000     | 	.quad 9
0x128: 0a00000000000000     | 	.quad 10
0x130: 0b00000000000000     | 	.quad 11
0x138: 0c00000000000000     | 	.quad 12
0x140: f3ffffffffffffff     | 	.quad -13
0x148: f2ffffffffffffff     | 	.quad -14
0x150: 0f00000000000000     | 	.quad 15
0x158: 1000000000000000     | 	.quad 16
0x160: efffffffffffffff     | 	.quad -17
0x168: 1200000000000000     | 	.quad 18
0x170: 1300000000000000     | 	.quad 19
0x178: 1400000000000000     | 	.quad 20
0x180: 1500000000000000     | 	.quad 21
0x188: eaffffffffffffff     | 	.quad -22
0x190: e9ffffffffffffff     | 	.quad -23
0x198: 1800000000000000     | 	.quad 24
0x1a0: e7ffffffffffffff     | 	.quad -25
0x1a8: 1a00000000000000     | 	.quad 26
0x1b0: 1b00000000000000     | 	.quad 27
0x1b8: e4ffffffffffffff     | 	.quad -28
0x1c0: 1d00000000000000     | 	.quad 29
0x1c8: 1e00000000000000     | 	.quad 30
0x1d0: 1f00000000000000     | 	.quad 31
0x1d8: 2000000000000000     | 	.quad 32
0x1e0: dfffffffffffffff     | 	.quad -33
0x1e8: 2200000000000000     | 	.quad 34
0x1f0: ddffffffffffffff     | 	.quad -35
0x1f8: dcffffffffffffff     | 	.quad -36
0x200: 2500000000000000     | 	.quad 37
0x208: daffffffffffffff     | 	.quad -38
0x210: d9ffffffffffffff     | 	.quad -39
0x218: d8ffffffffffffff     | 	.quad -40
0x220: d7ffffffffffffff     | 	.quad -41
0x228: 2a00000000000000     | 	.quad 42
0x230: 2b00000000000000     | 	.quad 43
0x238: 2c00000000000000     | 	.quad 44
0x240: d3ffffffffffffff     | 	.quad -45
0x248: d2ffffffffffffff     | 	.quad -46
0x250: 2f00000000000000     | 	.quad 47
0x258: 3000000000000000     | 	.quad 48
0x260: 3100000000000000     | 	.quad 49
0x268: ceffffffffffffff     | 	.quad -50
0x270: cdffffffffffffff     | 	.quad -51
0x278: ccffffffffffffff     | 	.quad -52
0x280: cbffffffffffffff     | 	.quad -53
0x288: caffffffffffffff     | 	.quad -54
0x290: 3700000000000000     | 	.quad 55
0x298: 3800000000000000     | 	.quad 56
0x2a0: 3900000000000000     | 	.quad 57
0x2a8: c6ffffffffffffff     | 	.quad -58
0x2b0: c5ffffffffffffff     | 	.quad -59
0x2b8: c4ffffffffffffff     | 	.quad -60
0x2c0: c3ffffffffffffff     | 	.quad -61
0x2c8: c2ffffffffffffff     | 	.quad -62
0x2d0: c1ffffffffffffff     | 	.quad -63
0x2d8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2e0:                      | 	.align 16
0x2e0:                      | Predest:
0x2e0: fadebc0000000000     | 	.quad 0xbcdefa
0x2e8:                      | dest:
0x2e8: abefcd0000000000     | 	.quad 0xcdefab
0x2f0: abefcd0000000000     | 	.quad 0xcdefab
0x2f8: abefcd0000000000     | 	.quad 0xcdefab
0x300: abefcd0000000000     | 	.quad 0xcdefab
0x308: abefcd0000000000     | 	.quad 0xcdefab
0x310: abefcd0000000000     | 	.quad 0xcdefab
0x318: abefcd0000000000     | 	.quad 0xcdefab
0x320: abefcd0000000000     | 	.quad 0xcdefab
0x328: abefcd0000000000     | 	.quad 0xcdefab
0x330: abefcd0000000000     | 	.quad 0xcdefab
0x338: abefcd0000000000     | 	.quad 0xcdefab
0x340: abefcd0000000000     | 	.quad 0xcdefab
0x348: abefcd0000000000     | 	.quad 0xcdefab
0x350: abefcd0000000000     | 	.quad 0xcdefab
0x358: abefcd0000000000     | 	.quad 0xcdefab
0x360: abefcd0000000000     | 	.quad 0xcdefab
0x368: abefcd0000000000     | 	.quad 0xcdefab
0x370: abefcd0000000000     | 	.quad 0xcdefab
0x378: abefcd0000000000     | 	.quad 0xcdefab
0x380: abefcd0000000000     | 	.quad 0xcdefab
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0:                      | Postdest:
0x4e0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x4e8:                      | .align 8
                            | # Run time stack
0x4e8: 0000000000000000     | 	.quad 0
0x4f0: 0000000000000000     | 	.quad 0
0x4f8: 0000000000000000     | 	.quad 0
0x500: 0000000000000000     | 	.quad 0
0x508: 0000000000000000     | 	.quad 0
0x510: 0000000000000000     | 	.quad 0
0x518: 0000000000000000     | 	.quad 0
0x520: 0000000000000000     | 	.quad 0
0x528: 0000000000000000     | 	.quad 0
0x530: 0000000000000000     | 	.quad 0
0x538: 0000000000000000     | 	.quad 0
0x540: 0000000000000000     | 	.quad 0
0x548: 0000000000000000     | 	.quad 0
0x550: 0000000000000000     | 	.quad 0
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
                            | 
0x568:                      | Stack:
