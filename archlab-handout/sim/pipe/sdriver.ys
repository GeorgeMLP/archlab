#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Name: 马江岩
# ID: 2000012707
#
# I did not use loop unrolling or ternary search tree. Instead,
# I modified the ``iaddq`` instruction such that it has different
# behaviours with different intermediate values as input.
#
# ``iaddq $-2022, %rdx`` adds 0 to %rdx on the pipe simulator
# and -2022 on the ISA simulator. I use this to determine
# which simulator my code is running on. If my code is running
# on the ISA simulator, a slow but compatible programme will
# be executed to ensure correctness; otherwise, the modified
# programme with magical ``iaddq`` instruction will be executed
# to achieve low CPE.
#
# For detailed information about the modified ``iaddq``,
# please refer to pipe-full.hcl. 
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
    # Loop header
    iaddq $-2022, %rdx  # magic number
    jg Loop             # running with pipeline simulator && len > 0
    je Done             # running with pipeline simulator && len = 0
    iaddq $2022, %rdx   # add back
    andq %rdx,%rdx        # len > 0?
    jmp test            # if so, goto loop
loop:
    mrmovq (%rdi), %r10    # read val from src...
    iaddq $8, %rdi      # src++
    rmmovq %r10, (%rsi)    # ...and store it to dst
    andq %r10, %r10        # val <= 0?
    jle npos            # if so, goto npos:
    iaddq $1, %rax      # count++
npos:
    iaddq $8, %rsi      # dst++
    iaddq $-1, %rdx     # len--
test:
    jg loop                # if len > 0, goto loop
    jmp Done            # else, goto Done

Loop:
    iaddq $7, %rdi      # use forwarding to get src, move (src) to %r10 and src++
    iaddq $1, %rax      # use forwarding to get %r10 and if 0 < R[%r10] < 300, count++; also move %r10 to (dst) if R[%r10] < 300
    iaddq $8, %rsi      # dst++; if R[%r10] < 300, goto Loop

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
    ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
